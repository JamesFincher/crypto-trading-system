# Crypto Trading System Environment Configuration
# This template provides all necessary environment variables for the application.
# Copy this file to .env and update the values according to your setup.

#------------------------------------------------------------------------------
# Environment Configuration
#------------------------------------------------------------------------------
# Controls application behavior and API endpoints
# Options: development, production
# - development: Uses testnet APIs and enables debug features
# - production: Uses mainnet APIs and optimizes for performance
ENVIRONMENT=development

#------------------------------------------------------------------------------
# Database Configuration
#------------------------------------------------------------------------------
# Main database connection string for the application
# Format: postgresql://[user]:[password]@[host]:[port]/[database]
# Local development default: postgresql://crypto_user:crypto_password@localhost:5432/crypto_trading
DATABASE_URL=postgresql://crypto_user:crypto_password@localhost:5432/crypto_trading

#------------------------------------------------------------------------------
# PostgreSQL Configuration
#------------------------------------------------------------------------------
# Individual PostgreSQL connection parameters
# These are used when DATABASE_URL is not explicitly set
POSTGRES_USER=crypto_user          # Database user
POSTGRES_PASSWORD=crypto_password  # Database password
POSTGRES_DB=crypto_trading        # Database name
POSTGRES_HOST=localhost          # Database host (localhost for local development)
POSTGRES_PORT=5432              # PostgreSQL default port

#------------------------------------------------------------------------------
# JWT Authentication Configuration
#------------------------------------------------------------------------------
# JSON Web Token settings for user authentication
SECRET_KEY=your-secret-key-here  # IMPORTANT: Generate a secure random key for production!
                                # You can generate one using: openssl rand -hex 32
ALGORITHM=HS256                 # JWT encryption algorithm (HS256 recommended)
ACCESS_TOKEN_EXPIRE_MINUTES=30  # Token expiration time in minutes

#------------------------------------------------------------------------------
# Binance API Configuration
#------------------------------------------------------------------------------
# Production Binance API credentials
# Required for live trading on Binance mainnet
BINANCE_API_KEY=your-binance-api-key        # Your Binance API key
BINANCE_API_SECRET=your-binance-api-secret  # Your Binance API secret

# Testnet API credentials
# Used in development environment for testing
BINANCE_TESTNET_API_KEY=your-testnet-api-key          # Binance testnet API key
BINANCE_TESTNET_SECRET_KEY=your-testnet-secret-key    # Binance testnet secret

#------------------------------------------------------------------------------
# Application Configuration
#------------------------------------------------------------------------------
# General application settings
LOG_LEVEL=INFO  # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL

# CORS Configuration
# Comma-separated lists of allowed origins and hosts
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000  # Frontend URLs
ALLOWED_HOSTS=localhost,127.0.0.1                           # Backend hosts

#------------------------------------------------------------------------------
# Docker Configuration
#------------------------------------------------------------------------------
# Special connection string for Docker environment
# Uses 'db' as hostname which is defined in docker-compose.yml
DOCKER_DATABASE_URL=postgresql://crypto_user:crypto_password@db:5432/crypto_trading

#------------------------------------------------------------------------------
# Security Notes
#------------------------------------------------------------------------------
# 1. Never commit the actual .env file to version control
# 2. Use strong, unique passwords in production
# 3. Regularly rotate API keys and secrets
# 4. Restrict ALLOWED_ORIGINS and ALLOWED_HOSTS in production
# 5. Use a secure SECRET_KEY in production
# 6. Consider using a secrets management service in production

#------------------------------------------------------------------------------
# Quick Start
#------------------------------------------------------------------------------
# 1. Copy this template: cp .env.template .env
# 2. Generate a secure SECRET_KEY
# 3. Update DATABASE_URL or PostgreSQL credentials
# 4. Add your Binance API credentials
# 5. Adjust ALLOWED_ORIGINS and ALLOWED_HOSTS for your environment
# 6. Set appropriate LOG_LEVEL (INFO or DEBUG for development)
